(load "https://github.com/TimDeve/subprocess@v0.0.2")
(load "../sheriff.carp")

(use-all Subprocess SubprocessRes SubprocessOptions Maybe Array Result)

(deftype Post
  [id    Int
   title String
   body  String
   user-id Int])
(SheriffJSON.rename Post
  [user-id "userId"])
(derive Post from-json)

(defn-do print-post [post]
  (println* "id: "       (Post.id post))
  (println* "user-id: "  (Post.user-id post))
  (println* "title: "    (Post.title post))
  (println* "body: "     (Post.body post)))

(defn fetch-single-post []
  (let [res (cmd (sps) &[@"curl" @"-sS" @"https://jsonplaceholder.typicode.com/posts/1"])
        code (exit-code &res)]
    (if (not (= @code 0))
      (System.exit @code)
      (match-ref (out &res)
        Nothing (System.exit 1)
        (Just std-out)
        (match (Post.from-json std-out)
          (Result.Error err) (do (IO.println &err)
                                 (System.exit 1))
          (Result.Success post) (print-post &post))))))

(defn fetch-posts []
  (let [res (cmd (sps) &[@"curl" @"-sS" @"https://jsonplaceholder.typicode.com/posts"])
        code (exit-code &res)]
    (if (not (= @code 0))
      (System.exit @code)
      (match-ref (out &res)
        Nothing (System.exit 1)
        (Just std-out)
        (match (SheriffJSON.unmarshall (Array Post) std-out)
          (Result.Error err) (do (IO.println &err)
                                 (System.exit 1))
          (Result.Success posts) (print-post (unsafe-nth &posts 99)))))))

(defn-do main []
  (fetch-single-post)
  (println* "---")
  (fetch-posts))
