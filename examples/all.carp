(load "sheriff.carp")

(deftype SomeStruct [a-double Double a-string String a-bool Bool a-int Int])
(deftype Nested [key String nest SomeStruct])

(defn marshall-example []
  (do
   (println* "---Marshall---")
   (println* (SheriffJSON.marshall SomeStruct &(SomeStruct.init 3.14 @"Hi" false 42)))
   (println* (SheriffJSON.marshall Nested &(Nested.init @"Carp" (SomeStruct.init 3.14 @"Hi" false 1992))))
   (println* (SheriffJSON.marshall (Array SomeStruct) &[(SomeStruct.init 1.34 @"Hi" false 0)
                                                        (SomeStruct.init 3.14 @"Hello" true 1)]))
   (println* (SheriffJSON.marshall (Maybe String) &(Maybe.Nothing)))))

(defn unmarshall-example []
  (let-do [input "{\"a-string\": \"Hi\", \"a-int\": 42, \"a-bool\": false, \"a-double\": 3.14}"]
    (println* "---Unmarshall---")
    (println* (format "Input: %s" input))
    (println* (format "Output: %s" &(str &(Result.unsafe-from-success (SheriffJSON.unmarshall SomeStruct input)))))))

(defn dsl-example []
  (with SheriffDSL
    (do
     (println* "---DSL---")
     (println* (stringify (a [(s @"Hello")
                              (n 1.0)
                              (null)])))

     (println* (stringify (a [(a [(s @"Hello")
                                  (n 1.0)
                                  (null)])
                              (a [(s @"Hello")
                                  (n 1.0)
                                  (null)])
                              (a [(s @"Hello")
                                  (n 3.14)
                                  (null)])])))

     (println* (stringify (o {@"field-a" (s @"sup")
                              @"field-b" (null)})))

     (println* (stringify (o {@"field-a" (s @"sup")
                              @"field-b" (o {@"an-array"
                                             (a [(n 1.0) (n 2.0) (n 3.0)])})}))))))


(deftype KvType [keyone Int keytwo String keythree Bool])

(defn kv-example []
  (do
   (println* "---KV---")
   (println* &(SheriffKV.unmarshall KvType &{@"keythree" @"true"
                                             @"keyone" @"3"
                                             @"keytwo" @"wow"}))))

(defn main []
  (do
   (marshall-example)
   (println* "")
   (unmarshall-example)
   (println* "")
   (dsl-example)
   (println* "")
   (kv-example)))

