(Debug.sanitize-addresses)

(load "Test.carp")

(load "../src/marshall.carp")

(use Test)

(deftype ABool [boooo Bool])
(derive ABool to-json)
(deftype ADouble [val Double])
(deftype AString [sam String])
(deftype All [bam Bool
              dang Double
              soom String
              arr (Array Double)
              nil (Maybe String)
              int Int])
(derive All to-json)

(deftype Nested [key-one ABool key-two ADouble])
(derive Nested to-json)

(deftest test
  (assert-equal test
    "true"
    &(SheriffJSON.marshall Bool &true)
    "Works with just Bool")

  (assert-equal test
    "3.14"
    &(SheriffJSON.marshall Double &3.14)
    "Works with just Double")

  (assert-equal test
    "42"
    &(SheriffJSON.marshall Int &42)
    "Works with just Int")

  (assert-equal test
    "\"Sup\""
    &(SheriffJSON.marshall String "Sup")
    "Works with just String")

  (assert-equal test
    "[1, 2, 3]"
    &(SheriffJSON.marshall (Array Double) &[1.0, 2.0, 3.0])
    "Works with Array")

  (assert-equal test
    "[\"one\", \"two\"]"
    &(SheriffJSON.marshall (Array String) &[@"one" @"two"])
    "Works with String Array")

  (assert-equal test
    "[{\"boooo\": true}, {\"boooo\": false}]"
    &(SheriffJSON.marshall (Array ABool) &[(ABool.init true) (ABool.init false)])
    "Works with Struct Array")

  (assert-equal test
    "\"Wow\""
    &(SheriffJSON.marshall (Maybe String) &(Maybe.Just @"Wow"))
    "Works with Maybe Just")

  (assert-equal test
    "null"
    &((fn [] (SheriffJSON.marshall (Maybe String) &(Maybe.Nothing))))
    "Works with Maybe Nothing")

 (assert-equal test
   "{\"boooo\": true}"
   &(SheriffJSON.marshall ABool &(ABool.init true))
   "Works with Bool")

 (assert-equal test
   "{\"boooo\": true}"
   &(to-json &(ABool.init true))
   "Works with to-json interface")

 (assert-equal test
   "{\"val\": 10}"
   &(SheriffJSON.marshall ADouble &(ADouble.init 10.0))
   "Works with Double")
 
 (assert-equal test
   "{\"sam\": \"Hello\"}"
   &(SheriffJSON.marshall AString &(AString.init @"Hello"))
   "Works with String")

 (assert-equal test
   "{\"arr\": [1, 2], \"int\": 42, \"dang\": 3.14, \"soom\": \"Carp\", \"nil\": \"maybe\", \"bam\": false}"
   &((fn [] (SheriffJSON.marshall All &(All.init false
                                                  3.14
                                                  @"Carp"
                                                  [1.0, 2.0]
                                                  (Maybe.Just @"maybe")
                                                  42))))
   "All together now")

 (assert-equal test
   "{\"arr\": [1, 2], \"int\": 42, \"dang\": 3.14, \"soom\": \"Carp\", \"nil\": \"maybe\", \"bam\": false}"
   &(to-json &(All.init false
                         3.14
                         @"Carp"
                         [1.0, 2.0]
                         (Maybe.Just @"maybe")
                         42))
   "All together now with to-json")

 (assert-equal test
   "{\"key-two\": {\"val\": 14.44}, \"key-one\": {\"boooo\": true}}"
   &((fn [] (SheriffJSON.marshall Nested &(Nested.init
                                           (ABool.init true)
                                           (ADouble.init 14.44)))))
   "Works with nested structs")

 (assert-equal test
   "{\"key-two\": {\"val\": 14.44}, \"key-one\": {\"boooo\": true}}"
   &(to-json &(Nested.init
               (ABool.init true)
               (ADouble.init 14.44)))
   "Works with nested structs and to-json"))

