(Debug.sanitize-addresses)

(load "Test.carp")

(load "../src/parse.carp")
(load "../src/get.carp")

(use Test)

(use SheriffJSON)

(deftest test
  (assert-equal test
    &(Result.Success @"wow")
    &(Result.and-then
             (parse "\"wow\"")
             &(fn [p] (get-string &p ".")))
    "Parses string")

  (assert-equal test
    &(Result.Success @"wow\nwow")
    &(Result.and-then
             (parse "\"wow\\nwow\"")
             &(fn [p] (get-string &p ".")))
    "Parses string | newline")

  (assert-equal test
    &(Result.Success @"\"")
    &(Result.and-then
             (parse "\"\\\"\"")
             &(fn [p] (get-string &p ".")))
    "Parses string | double quote")

  (assert-equal test
    &(Result.Success @" / ")
    &(Result.and-then
             (parse "\" \\/ \"")
             &(fn [p] (get-string &p ".")))
    "Parses string | slash")

  (assert-equal test
    &(Result.Success @" \\ ")
    &(Result.and-then
             (parse "\" \\\\ \"")
             &(fn [p] (get-string &p ".")))
    "Parses string | back-slash")

  (assert-equal test
    &(Result.Success @" \t ")
    &(Result.and-then
             (parse "\" \\t \"")
             &(fn [p] (get-string &p ".")))
    "Parses string | tab")

  (assert-equal test
    &(Result.Success @" \b ")
    &(Result.and-then
             (parse "\" \\b \"")
             &(fn [p] (get-string &p ".")))
    "Parses string | backspace")

  (assert-equal test
    &(Result.Success @" \f ")
    &(Result.and-then
             (parse "\" \\f \"")
             &(fn [p] (get-string &p ".")))
    "Parses string | formfeed")

  (assert-equal test
    &(Result.Success @" \r ")
    &(Result.and-then
             (parse "\" \\r \"")
             &(fn [p] (get-string &p ".")))
    "Parses string | carriage return")

  ; TODO Parse character code
  ; (assert-equal test
  ;   &(Result.Success @"·å∑")
  ;   &(Result.and-then
  ;            (parse "\"\\u1337\"")
  ;            &(fn [p] (get-string &p ".")))
  ;   "Parses string | character code")

  (assert-equal test
    &(Result.Error @"Value is not a string")
    &(Result.and-then
             (parse "1")
             &(fn [p] (get-string &p ".")))
    "Returns error if trying to get a string where there is another type")


  (assert-equal test
    &(Result.Success 1234.0)
    &(Result.and-then
             (parse "1234")
             &(fn [p] (get-number &p ".")))
    "Parses number")

  (assert-equal test
    &(Result.Success -0.1337)
    &(Result.and-then
             (parse "-0.1337")
             &(fn [p] (get-number &p ".")))
    "Parses negative number")

  (assert-equal test
    &(Result.Success 3.14)
    &(Result.and-then
             (parse "3.14")
             &(fn [p] (get-number &p ".")))
    "Parses number with decimals")

  (assert-equal test
    &(Result.Success 314.0)
    &(Result.and-then
             (parse "3.14e+2")
             &(fn [p] (get-number &p ".")))
    "Parses number with exponent I")

  (assert-equal test
    &(Result.Success 0.0314)
    &(Result.and-then
             (parse "3.14e-2")
             &(fn [p] (get-number &p ".")))
    "Parses number with exponent II")

  (assert-equal test
    &(Result.Error @"Number not a valid double")
    &(Result.and-then
             (parse "3..14")
             &(fn [p] (get-number &p ".")))
    "Errors when parsing invalid number I")

  (assert-equal test
    &(Result.Error @"Number not a valid double")
    &(Result.and-then
             (parse "-e199")
             &(fn [p] (get-number &p ".")))
    "Errors when parsing invalid number II")

  (assert-equal test
    &(Result.Error @"Value is not a number")
    &(Result.and-then
             (parse "\"wow\"")
             &(fn [p] (get-number &p ".")))
    "Returns error if trying to get a number where there is another type")

  (assert-equal test
    &(Result.Success true)
    &(Result.and-then
             (parse "true")
             &(fn [p] (get-bool &p ".")))
    "Parses true")

  (assert-equal test
    &(Result.Success false)
    &(Result.and-then
             (parse "false")
             &(fn [p] (get-bool &p ".")))
    "Parses false")

  (assert-equal test
    &(Result.Error @"Value is not a boolean")
    &(Result.and-then
             (parse "\"wow\"")
             &(fn [p] (get-bool &p ".")))
    "Returns error if trying to get a bool where there is another type")

  (assert-equal test
    &(Result.Success @"wow")
    &(Result.and-then
             (parse "{\"a-key\": \"wow\"}")
             &(fn [p] (get-string &p ".a-key")))
    "Parses string in object")

  (assert-equal test
    &(Result.Success @"string")
    &(Result.and-then
             (parse "{\"a-key\": \"wow\", \"another-key\": \"string\"}")
             &(fn [p] (get-string &p ".another-key")))
    "Parses strings in object")

  (assert-equal test
    &(Result.Success 3.14)
    &(Result.and-then
             (parse "{\"a-key\": 3.14, \"another-key\": \"string\"}")
             &(fn [p] (get-number &p ".a-key")))
    "Parses number in object")

  (assert-equal test
    &(Result.Error @"Number not a valid double")
    &(Result.and-then
             (parse "{\"a-key\": 3..14, \"another-key\": \"string\"}")
             &(fn [p] (get-number &p ".a-key")))
    "Errors parsing invalid number in object")

  (assert-equal test
    &(Result.Success false)
    &(Result.and-then
             (parse "{\"a-key\": false, \"another-key\": \"string\"}")
             &(fn [p] (get-bool &p ".a-key")))
    "Parses bool in object")

  (assert-equal test
    &(Result.Error @"Expected colon but got a different token")
    &(Result.map
             (parse "{\"a-key\" null}")
             &(fn [_] @"Shoulda Failed"))
    "Errors when a colon is missing I")

  (assert-equal test
    &(Result.Error @"Expected colon but got a different token")
    &(Result.map
             (parse "{\"a-key\"}")
             &(fn [_] @"Shoulda Failed"))
    "Errors when a colon is missing II")

  (assert-equal test
    &(Result.Error @"Expected colon but got end of tokens")
    &(Result.map
             (parse "{\"a-key\"")
             &(fn [_] @"Shoulda Failed"))
    "Errors when a colon is missing - end of input")

  (assert-equal test
    &(Result.Error @"Expected key but got a different token")
    &(Result.map
             (parse "{1337")
             &(fn [_] @"Shoulda Failed"))
    "Errors when a key is missing")

  (assert-equal test
    &(Result.Error @"Expected key but got end of tokens")
    &(Result.map
             (parse "{")
             &(fn [_] @"Shoulda Failed"))
    "Errors when a key is missing - end of input")

  (assert-equal test
    &(Result.Success 1337.0)
    &(Result.and-then
             (parse "{\"an-obj\": {\"k\": 1337}, \"a-key\": false, \"another-key\": \"string\"}")
             &(fn [j] (get-number &j ".an-obj.k")))
   "Can parse nested objects")

  (assert-equal test
    &(Result.Success 42.0)
    &(Result.and-then
             (parse "{\"deeply\": {\"nested\": {\"objects\": 42}}}")
             &(fn [j] (get-number &j ".deeply.nested.objects")))
   "Can parse deeply nested objects")

  (assert-equal test
    &(Result.Success @"Success")
    &(Result.map
             (parse "{}")
             &(fn [p] @"Success"))
    "Can parse empty objects")

  (assert-equal test
    &(Result.Success 0)
    &(Result.and-then
             (parse "[]")
             &(fn [p] (match p (Arr arr) (Success (length &arr))
                               _         (Error @"Not an array?"))))
    "Can parse empty array")

  (assert-equal test
    &(Result.Success 3.14)
    &(Result.and-then
             (parse "[3.14]")
             &(fn [p] (get-number &p [(Idx 0)])))
    "Can parse array with a single thing in it")

  (assert-equal test
    &(Result.Success 42.0)
    &(Result.and-then
             (parse "[\"string\", 42, false]")
             &(fn [p] (get-number &p [(Idx 1)])))
    "Can parse array with things in it")

  (assert-equal test
    &(Result.Success @"val")
    &(Result.and-then
             (parse "{\"key-one\": [{\"key-two\": \"val\"}]}")
             &(fn [p] (get-string &p [(Key @"key-one") (Idx 0) (Key @"key-two")])))
    "Can access deeply nested objects and array"))

