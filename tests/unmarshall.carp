(Debug.sanitize-addresses)

(load "Test.carp")

(load "../src/unmarshall.carp")

(use Test)

(deftype AllScalarStruct [st String bol Bool deci Double int Int num Double])
(derive AllScalarStruct =)
(derive AllScalarStruct from-json)

(deftype StringsStruct [key-one String keytwo String])
(derive StringsStruct =)

(deftype BoolStruct [key-one Bool])
(derive BoolStruct =)

(deftype NumberStruct [key-one Double])
(derive NumberStruct =)

(deftype NestedObj [obj NumberStruct])
(derive NestedObj =)

(deftype NestedArray [arr (Array Int)])
(derive NestedArray =)
(derive NestedArray from-json)

(deftype RenameStruct [kebab-case Int other Int])
(derive RenameStruct =)
(SheriffJSON.rename RenameStruct [kebab-case "kebabCase"])

(deftest test
  (assert-equal test
    &(Result.Success @"wow")
    &(SheriffJSON.unmarshall String "\"wow\"")
    "Works with just String")

  (assert-equal test
    &(Result.Success true)
    &(SheriffJSON.unmarshall Bool "true")
    "Works with just Bool")

  (assert-equal test
    &(Result.Success 12.34)
    &(SheriffJSON.unmarshall Double "12.34")
    "Works with just Double")

  (assert-equal test
    &(Result.Success 42)
    &(SheriffJSON.unmarshall Int "42")
    "Works with just Int")

  (assert-equal test
    &(Result.Success (StringsStruct.init @"val one" @"val two"))
    &(SheriffJSON.unmarshall StringsStruct "{\"key-one\": \"val one\", \"keytwo\": \"val two\"}")
    "Works with struct with just Strings")

  (assert-equal test
    &(Result.Success (BoolStruct.init false))
    &(SheriffJSON.unmarshall BoolStruct "{\"key-one\": false}")
    "Works with struct with bool")

  (assert-equal test
    &(Result.Success (NumberStruct.init 1234.5678))
    &(SheriffJSON.unmarshall NumberStruct "{\"key-one\": 1234.5678}")
    "Works with struct with number")

  (assert-equal test
    &(Result.Success (AllScalarStruct.init @"Hello Hello" false 1234.5678 8 42.0))
    &(SheriffJSON.unmarshall AllScalarStruct "{\"st\": \"Hello Hello\", \"num\": 42, \"deci\": 1234.5678, \"bol\": false, \"int\": 8}")
    "Works with struct with all supported types")

  (assert-equal test
    &(Result.Success (AllScalarStruct.init @"Hello Hello" false 1234.5678 8 42.0))
    &(AllScalarStruct.from-json "{\"st\": \"Hello Hello\", \"num\": 42, \"deci\": 1234.5678, \"bol\": false, \"int\": 8}")
    "Works with struct with all supported types & from-json")

  (assert-equal test
    &(Result.Success (NestedObj.init (NumberStruct.init 3.14)))
    &(SheriffJSON.unmarshall NestedObj "{\"obj\": {\"key-one\": 3.14}}")
    "Works with nested structs")

  (assert-equal test
    &(Result.Success [1 2 3])
    &(SheriffJSON.unmarshall (Array Int) "[1, 2, 3]")
    "Works with array | Int")

  (assert-equal test
    &(Result.Success [1.0 2.0 3.0])
    &(SheriffJSON.unmarshall (Array Double) "[1, 2, 3]")
    "Works with array | Double")

  (assert-equal test
    &(Result.Success [[1.0 2.0 3.0]])
    &(SheriffJSON.unmarshall (Array (Array Double)) "[[1, 2, 3]]")
    "Works with array | Nested")

  (assert-equal test
    &(Result.Success [(NestedObj (NumberStruct 3.14)) (NestedObj (NumberStruct 42.0))])
    &(SheriffJSON.unmarshall (Array NestedObj) "[{\"obj\": {\"key-one\": 3.14}}, {\"obj\": {\"key-one\": 42}}]")
    "Works with array | Nested Object")

  (assert-equal test
    &(Result.Success (NestedArray [1 2 3]))
    &(NestedArray.from-json "{\"arr\": [1, 2, 3]}")
    "Works with array | Nested Array in Object")

  (assert-equal test
    &(Result.Error @"Value is not a number")
    &(SheriffJSON.unmarshall (Array Double) "[1, \"hello\", 3]]")
    "Works with array | Wrong type I")

  (assert-equal test
    &(Result.Error @"Value is not a string")
    &(SheriffJSON.unmarshall (Array String) "[\"hello\", 3]]")
    "Works with array | Wrong type II")

  (assert-equal test
    &(Result.Success (RenameStruct 314 100))
    &(SheriffJSON.unmarshall RenameStruct "{\"kebabCase\": 314, \"other\": 100}")
    "Can rename fields"))

