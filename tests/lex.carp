(load "Test.carp")

(load "../src/lex.carp")

(use Test)

(use SheriffLexer)
(use SheriffTok)

(deftest test
  (assert-equal test
    "(Success [(LeftCurly) (RightCurly)])"
    &(str &(lex "{}"))
    "Lex curly braces")

  (assert-equal test
    "(Success [(LeftCurly) (RightCurly)])"
    &(str &(lex "{ \n\t\r}"))
    "Skips whitespace")

  (assert-equal test
    "(Success [(LeftBracket) (RightBracket)])"
    &(str &(lex "[]"))
    "Lex square bracket")

  (assert-equal test
    "(Success [(Str @\"Strong\")])"
    &(str &(lex "\"Strong\""))
    "Lex string")

  (assert-equal test
    "(Success [(Num @\"1\")])"
    &(str &(lex "1"))
    "Lex numbers by themselves")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Str @\"value\") (RightCurly)])"
    &(str &(lex "{\"key\": \"value\"}"))
    "Lex string kv")

  (assert-equal test
    "(Error @\"Unmatched double-quote\")"
    &(str &(lex "\"AAAAAAAAAAA"))
    "Get error for unclosed double quotes")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Num @\"1.23\") (RightCurly)])"
    &(str &(lex "{\"key\": 1.23}"))
    "with number")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Num @\"1e10\") (RightCurly)])"
    &(str &(lex "{\"key\": 1e10}"))
    "with numbers with exponents")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Num @\"1e10\")])"
    &(str &(lex "{\"key\": 1e10"))
    "Stops when lexing number and end of string")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Null) (RightCurly)])"
    &(str &(lex "{\"key\": null}"))
    "with null")

  (assert-equal test
    "(Error @\"Failed to lex null token\")"
    &(str &(lex "{\"key\": nul}"))
    "error when null parsing")

  (assert-equal test
    "(Error @\"Failed to lex null token\")"
    &(str &(lex "{\"key\": nu}"))
    "error when null parsing, too short")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Bol true) (RightCurly)])"
    &(str &(lex "{\"key\": true}"))
    "with true")

  (assert-equal test
    "(Error @\"Failed to lex true token\")"
    &(str &(lex "{\"key\": tqwqwe}"))
    "error when true parsing")

  (assert-equal test
    "(Error @\"Failed to lex true token\")"
    &(str &(lex "{\"key\": tr}"))
    "error when true parsing, too short")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (Bol false) (RightCurly)])"
    &(str &(lex "{\"key\": false}"))
    "with false")

  (assert-equal test
    "(Error @\"Failed to lex false token\")"
    &(str &(lex "{\"key\": fefwe}"))
    "error when false parsing")

  (assert-equal test
    "(Error @\"Failed to lex false token\")"
    &(str &(lex "{\"key\": fa}"))
    "error when false parsing, too short")

  (assert-equal test
    "(Success [(LeftCurly) (Str @\"key\") (Colon) (LeftBracket) (Num @\"1e10\") (Comma) (Null) (RightBracket) (RightCurly)])"
    &(str &(lex "{\"key\": [1e10, null]}"))
    "All together now"))

