(load "Test.carp")

(load "../src/kv.carp")

(use Test)

(deftype BasicInt [val Int])
(defmodule BasicInt
 (implements = =)
 (defn = [a b] (= (BasicInt.val a) (BasicInt.val b))))

(deftype BasicStr [wow String])
(defmodule BasicStr
 (implements = =)
 (defn = [a b] (= (BasicStr.wow a) (BasicStr.wow b))))

(deftype BasicBool [b Bool])
(defmodule BasicBool
 (implements = =)
 (defn = [a b] (= (BasicBool.b a) (BasicBool.b b))))

(deftype TwoFields [one String two Int])
(defmodule TwoFields
 (implements = =)
 (defn = [a b]
  (and
   (= (TwoFields.one a) (TwoFields.one b))
   (= (TwoFields.two a) (TwoFields.two b)))))

(deftype All [one String two Int three Bool])
(defmodule All
 (implements = =)
 (defn = [a b]
   (and
    (and
     (= (All.one a) (All.one b))
     (= (All.two a) (All.two b)))
    (= (All.three a) (All.three b)))))

(deftest test
  (assert-equal test
    &(BasicInt.init 1)
    &(SheriffKV.unmarshall BasicInt &{@"val" @"1"})
    "Unmarshalls single int")

  (assert-equal test
    &(BasicStr.init @"testing")
    &(SheriffKV.unmarshall BasicStr &{@"wow" @"testing"})
    "Unmarshalls single string")

  (assert-equal test
    &(BasicBool.init true)
    &(SheriffKV.unmarshall BasicBool &{@"b" @"true"})
    "Unmarshalls single bool")

  (assert-equal test
    &(TwoFields.init @"a string" 1)
    &(SheriffKV.unmarshall TwoFields &{@"one" @"a string" @"two" @"1"})
    "Unmarshalls two fields")

  (assert-equal test
    &(TwoFields.init @"a string" 1)
    &(SheriffKV.unmarshall TwoFields &{@"one" @"a string" @"two" @"1"})
    "Unmarshalls two fields")

  (assert-equal test
    &(All.init @"a string" 1 true)
    &(SheriffKV.unmarshall All &{@"one" @"a string" @"three" @"true" @"two" @"1"})
    "all together now"))
