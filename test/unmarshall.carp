(Debug.sanitize-addresses)

(load "Test.carp")

(load "../src/unmarshall.carp")

(use Test)

(deftype AllStruct [st String bol Bool deci Double int Int num Double])
(derive AllStruct =)
(derive AllStruct from-json)

(deftype StringsStruct [key-one String keytwo String])
(derive StringsStruct =)

(deftype BoolStruct [key-one Bool])
(derive BoolStruct =)

(deftype NumberStruct [key-one Double])
(derive NumberStruct =)

(deftest test
  (assert-equal test
    &(Result.Success @"wow")
    &(SheriffJSON.unmarshall String "\"wow\"")
    "Works with just String")

  (assert-equal test
    &(Result.Success true)
    &(SheriffJSON.unmarshall Bool "true")
    "Works with just Bool")

  (assert-equal test
    &(Result.Success 12.34)
    &(SheriffJSON.unmarshall Double "12.34")
    "Works with just Double")

  (assert-equal test
    &(Result.Success 42)
    &(SheriffJSON.unmarshall Int "42")
    "Works with just Int")

  (assert-equal test
    &(Result.Success (StringsStruct.init @"val one" @"val two"))
    &(SheriffJSON.unmarshall StringsStruct "{\"key-one\": \"val one\", \"keytwo\": \"val two\"}")
    "Works with struct with just Strings")

  (assert-equal test
    &(Result.Success (BoolStruct.init false))
    &(SheriffJSON.unmarshall BoolStruct "{\"key-one\": false}")
    "Works with struct with bool")

  (assert-equal test
    &(Result.Success (NumberStruct.init 1234.5678))
    &(SheriffJSON.unmarshall NumberStruct "{\"key-one\": 1234.5678}")
    "Works with struct with number")

  (assert-equal test
    &(Result.Success (AllStruct.init @"Hello Hello" false 1234.5678 8 42.0))
    &(SheriffJSON.unmarshall AllStruct "{\"st\": \"Hello Hello\", \"num\": 42, \"deci\": 1234.5678, \"bol\": false, \"int\": 8}")
    "Works with struct with all supported types")

  (assert-equal test
    &(Result.Success (AllStruct.init @"Hello Hello" false 1234.5678 8 42.0))
    &(AllStruct.from-json "{\"st\": \"Hello Hello\", \"num\": 42, \"deci\": 1234.5678, \"bol\": false, \"int\": 8}")
    "Works with struct with all supported types & from-json"))

