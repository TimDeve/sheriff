(load "dsl.carp")
(load "rename.carp")

(definterface to-json (Fn [(Ref a)] String))

(defmodule SheriffJSON
  (defndynamic make-array [lst]
    (let [arr (gensym-with 'arr)]
     (list 'let
           (array arr (list 'Array.zero))
           (cons-last
             arr
             (cons
               'do
               (map (fn [item]
                        (list 'Array.push-back!
                              (list 'ref arr)
                              item))
                    lst))))))

  (defndynamic is-array-type? [t]
    (if (and (list? t) (not (empty? t)))
      (= 'Array (car t))
      false))

  (defndynamic get-array-type [t]
    (cadr t))

  (defndynamic is-maybe-type? [t]
    (if (and (list? t) (not (empty? t)))
      (= 'Maybe (car t))
      false))

  (defndynamic get-maybe-type [t]
    (cadr t))

  (defndynamic not-supported-message [t]
    (macro-error (String.concat [(str t) " are not allowed in struct to marshall"])))

  (defndynamic supported? [t]
    (if (list? t)
      (or (SheriffJSON.is-array-type? t)
          (SheriffJSON.is-maybe-type? t))
      (or (Introspect.struct? (eval t))
          (any? (fn [x] (= t x)) '(Double
                                   Int
                                   String
                                   Bool)))))

  (defndynamic to-str [t v]
    (if (not (SheriffJSON.supported? t))
        (SheriffJSON.not-supported-message t)
        (if (SheriffJSON.is-array-type? t)
          (SheriffJSON.arr t v)
          (if (SheriffJSON.is-maybe-type? t)
            (SheriffJSON.maybe t v)
            (case t
              'Double (list 'SheriffDSL.n (list 'copy v))
              'Int (list 'SheriffDSL.n (list 'Double.from-int (list 'copy v)))
              'String (list 'SheriffDSL.s (list 'copy v))
              'Bool (list 'SheriffDSL.b (list 'copy v))
              (SheriffJSON.object t v))))))

  (defndynamic create-pair [t v]
    (fn [type-pair]
      (list 'Pair.init
         (list 'copy (SheriffJSON.get-field-rename t (car type-pair)))
         (SheriffJSON.to-str (cadr type-pair)
                         (list (Symbol.prefix t (car type-pair)) v)))))

  (defndynamic create-arr-for-map [t v]
    (list 'the
          (list 'Array (list 'Pair 'String 'SheriffDSL))
          (SheriffJSON.make-array
                 (map
                  (SheriffJSON.create-pair t v)
                  (eval (list 'members t))))))

  (defndynamic object [t v]
    (list 'SheriffDSL.o
          (list 'Map.from-array
                (SheriffJSON.create-arr-for-map t v))))

  (defndynamic arr [t v]
   (let [map-fn (list 'fn (array 'x)
                    (SheriffJSON.to-str (SheriffJSON.get-array-type t) 'x))]
        (list 'SheriffDSL.a
              (list 'Array.copy-map (list 'ref map-fn)
                                    v))))

  (defndynamic maybe [t v]
    (let [val (gensym-with 'val)]
      (list 'match-ref v
        (list 'Maybe.Just val) (SheriffJSON.to-str (SheriffJSON.get-maybe-type t) val)
        'Maybe.Nothing (list 'SheriffDSL.null))))

  (defndynamic stringify [t v]
    (list 'SheriffDSL.stringify
          (SheriffJSON.to-str t v)))

  (defmacro marshall [t v]
    (let [rf (gensym-with 'reference)]
       (list 'let (array rf (list 'the (list 'Ref t) v))
             (SheriffJSON.stringify t rf)))))

(make-deriver 'to-json ['v]
  (fn [t]
    (SheriffJSON.stringify t 'v)))

