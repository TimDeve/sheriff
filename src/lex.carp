(use Result)

(deftype SheriffTok
 LeftCurly
 RightCurly
 LeftBracket
 RightBracket
 Colon
 Comma
 Null
 (Str [String])
 (Bol [Bool])
 (Num [String]))

(defmodule SheriffLexer
  (defn- is-white-space? [char]
    (StaticArray.any? &(fn [c] (= char c)) $[\space \tab \newline \return]))

  (defn- is-null? [i chrs]
    (if (< (+ i 3) (Array.length chrs))
      (StaticArray.all? &copy
                        $[(= \n @(Array.unsafe-nth chrs i))
                          (= \u @(Array.unsafe-nth chrs (+ 1 i)))
                          (= \l @(Array.unsafe-nth chrs (+ 2 i)))
                          (= \l @(Array.unsafe-nth chrs (+ 3 i)))])
      false))

  (defn- is-true? [i chrs]
    (if (< (+ i 3) (Array.length chrs))
      (StaticArray.all? &copy
                        $[(= \t @(Array.unsafe-nth chrs i))
                          (= \r @(Array.unsafe-nth chrs (+ 1 i)))
                          (= \u @(Array.unsafe-nth chrs (+ 2 i)))
                          (= \e @(Array.unsafe-nth chrs (+ 3 i)))])
      false))

  (defn- is-false? [i chrs]
    (if (< (+ i 4) (Array.length chrs))
      (StaticArray.all? &copy
                        $[(= \f @(Array.unsafe-nth chrs i))
                          (= \a @(Array.unsafe-nth chrs (+ 1 i)))
                          (= \l @(Array.unsafe-nth chrs (+ 2 i)))
                          (= \s @(Array.unsafe-nth chrs (+ 3 i)))
                          (= \e @(Array.unsafe-nth chrs (+ 4 i)))])
      false))

  (defn- number-start-char? [c]
    (or (Char.num? @c)
        (= @c \-)))

  (defn- lex-number [i chrs]
    (let-do [done false char-str (the (Array Char) [])]
      (while-do (and (< i (Array.length chrs))
                     (not done))
        (let [char (the (Ref Char) (Array.unsafe-nth chrs i))]
          (if (not (StaticArray.any? &(fn [c] (= char c))
                                     $[\- \+ \0 \1 \2 \3 \4 \5 \6 \7 \8 \9 \e \E \.]))
            (set! done true)
            (do
              (Array.push-back! &char-str @char)
              (update! i inc)))))
      (Success (Pair.init i (SheriffTok.Num (String.from-chars &char-str))))))

  (defn- lex-string [i chrs]
    (let [error false done false char-str (the (Array Char) [])]
      (do
        (while (and (< i (Array.length chrs))
                    (not done))
         (let [char @(Array.unsafe-nth chrs i)]
          (if (and (= \" char) (not (= \\ @(Array.unsafe-nth chrs (- i 1)))))
            (set! done true)
            (do
              (Array.push-back! &char-str char)
              (update! i inc)
              (if (= i (Array.length chrs)) (set! error true) ())))))
        (if error
          (Error @"Unmatched double-quote")
          (Success (Pair.init i (SheriffTok.Str (String.from-chars &char-str))))))))

  (sig lex (Fn [(Ref String)] (Result (Array SheriffTok) String)))
  (defn lex [s]
    (let-do [i 0
             chrs &(chars s)
             error (Nothing)
             toks []]
      (while (and (nothing? &error) (< i (Array.length chrs)))
        (let [current-char (Array.unsafe-nth chrs i)]
          (if (is-white-space? current-char)
            (set! i (inc i))
            (if (number-start-char? current-char)
              (match (lex-number i chrs)
                (Error err) (set! error (Just err))
                (Success pair)
                (do (set! i @(Pair.a &pair))
                    (Array.push-back! &toks @(Pair.b &pair))))
              (case @current-char
                \{ (do (set! i (inc i))
                       (Array.push-back! &toks (SheriffTok.LeftCurly)))
                \} (do (set! i (inc i))
                       (Array.push-back! &toks (SheriffTok.RightCurly)))
                \[ (do (set! i (inc i))
                       (Array.push-back! &toks (SheriffTok.LeftBracket)))
                \] (do (set! i (inc i))
                       (Array.push-back! &toks (SheriffTok.RightBracket)))
                \: (do (set! i (inc i))
                       (Array.push-back! &toks (SheriffTok.Colon)))
                \, (do (set! i (inc i))
                       (Array.push-back! &toks (SheriffTok.Comma)))
                \n (if (is-null? i chrs)
                     (do (set! i (+ i 4))
                         (Array.push-back! &toks (SheriffTok.Null)))
                     (set! error  (Just @"Failed to lex null token")))
                \t (if (is-true? i chrs)
                     (do (set! i (+ i 4))
                         (Array.push-back! &toks (SheriffTok.Bol true)))
                     (set! error (Just @"Failed to lex true token")))
                \f (if (is-false? i chrs)
                     (do (set! i (+ i 5))
                         (Array.push-back! &toks (SheriffTok.Bol false)))
                     (set! error (Just @"Failed to lex false token")))
                \" (match (lex-string (inc i) chrs)
                      (Error e) (set! error (Just e))
                      (Success pair)
                      (do (set! i (inc @(Pair.a &pair)))
                          (Array.push-back! &toks @(Pair.b &pair))))
               (set! error (Just (String.append "Unexpect char = " &(str @current-char)))))))))
      (match error
        (Nothing)  (Success toks)
        (Just err) (Error err)))))

