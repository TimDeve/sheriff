(use Array)
(use Map)

(deftype SheriffDSL (Node [String]))

(defmodule SheriffDSL
  (sig stringify (Fn [SheriffDSL] String))
  (defn stringify [n] (match n (SheriffDSL.Node v) v))

  (defn escape-string [s]
    (let [sub $[(Pair.init @#"\\" @"\\\\\\\\")
                (Pair.init (Pattern.init "\\\"") @"\\\\\"")
                (Pair.init @#"\t" @"\\\\t")
                (Pair.init (Pattern.init "\b") @"\\\\b")
                (Pair.init (Pattern.init "\f") @"\\\\f")
                (Pair.init @#"\r" @"\\\\r")
                (Pair.init @#"\n" @"\\\\n")]]
      (StaticArray.reduce
       &(fn [acc pair]
         (Pattern.substitute (Pair.a pair) &acc (Pair.b pair) -1))
       s
       sub)))

  (sig s (Fn [String] SheriffDSL))
  (defn s [string] (SheriffDSL.Node (fmt "\"%s\"" &(escape-string string))))

  (sig n (Fn [Double] SheriffDSL))
  (defn n [double] (SheriffDSL.Node (fmt "%.16g" double)))

  (sig b (Fn [Bool] SheriffDSL))
  (defn b [boolean] (SheriffDSL.Node (Bool.str boolean)))

  (sig a (Fn [(Array SheriffDSL)] SheriffDSL))
  (defn a [arr]
    (SheriffDSL.Node
      (fmt "[%s]" &(String.join ", " &(copy-map
                                       &(fn [n] (SheriffDSL.stringify @n))
                                       &(the (Array SheriffDSL) arr))))))

  (defn- make-kv [arg]
    (fmt "\"%s\": %s"
         (the (Ref String) (Pair.a arg))
         &(SheriffDSL.stringify @(Pair.b arg))))

  (sig o (Fn [(Map String SheriffDSL)] SheriffDSL))
  (defn o [m]
    (SheriffDSL.Node
      (fmt "{%s}" &(--> (to-array &(the (Map String SheriffDSL) m))
                        (ref)
                        (copy-map &SheriffDSL.make-kv)
                        (ref)
                        (String.join ", ")))))

  (sig null (Fn [] SheriffDSL))
  (defn null [] (SheriffDSL.Node @"null"))
  (implements zero null))

