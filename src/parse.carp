(load "./lex.carp")
(load "./json-node.carp")

(use Maybe)
(use Result)
(use Array)
(use Map)

(defmodule SheriffJSON
  (register parse-toks (Fn [(Ref (Array SheriffTok)) Int] (Result (Pair SheriffJsonNode Int) String)))

  (defn- check-colon [toks i key]
    (let [maybe-colon (Array.nth toks (inc i))]
      (match maybe-colon
        (Just colon) (match colon
                       SheriffTok.Colon (Success key)
                       _                (Error @"Expected colon but got a different token"))
        _            (Error @"Expected colon but got end of tokens"))))

  (defn- get-key [toks i]
    (let [maybe-key (Array.nth toks i)]
      (match maybe-key
        (Just key) (match key
                     (SheriffTok.Str key-str) (Success key-str)
                     _                        (Error @"Expected key but got a different token"))
        _          (Error @"Expected key but got end of tokens"))))

  (defn- next-tok-is-closing-curly [toks i]
    (let [maybe-next-tok (Array.nth toks i)]
      (match maybe-next-tok
        (Just next-tok) (match next-tok
                          (SheriffTok.RightCurly) true
                          _                       false)
        _               false)))

  (defn- parse-obj [toks i]
    (with SheriffJsonNodeBox
      (let-do [error (Nothing)
               obj (the (Map String SheriffJsonNodeBox) (Map.create))
               obj* &obj
               done false]
        (while-do (and (not done)
                       (not (just? &error))
                       (not (next-tok-is-closing-curly toks i)))
         (match (=> (get-key toks i)
                    (and-then &(fn [key-str] (check-colon toks i key-str)))
                    (and-then &(fn [key-str]
                                 (match (parse-toks toks (+ i 2))
                                   (Success pair) (do (put! obj* &key-str &(box @(Pair.a &pair)))
                                                      (Success @(Pair.b &pair)))
                                   (Error err)    (Error err)))))
            (Success index) (set! i index)
            (Error err) (set! error (Just err)))
         (unless (just? &error)
          (let [maybe-sep (Array.nth toks i)]
            (match maybe-sep
              (Just sep)
              (match sep
               (SheriffTok.Comma) (set! i (inc i))
               (SheriffTok.RightCurly) (set! done true)
               _ (set! error (Just @"Expected Comma or RightCurly but got a different token")))
              _ (set! error (Just @"Expected Comma or RightCurly but got end of tokens"))))))
        (match error
          (Nothing)  (Success (Pair.init (SheriffJsonNode.Obj obj) (inc i)))
          (Just err) (Error err)))))

  (defn- next-tok-is-closing-bracket [toks i]
    (let [maybe-next-tok (Array.nth toks i)]
      (match maybe-next-tok
        (Just next-tok) (match next-tok
                          (SheriffTok.RightBracket) true
                          _                       false)
        _               false)))

  (defn- parse-array [toks index]
    (with SheriffJsonNodeBox
      (let-do [error (Nothing)
               i     index
               arr   (the (Array SheriffJsonNodeBox) [])
               arri     0
               arr*  &arr
               done  false]
        (while-do (and (not done)
                       (not (just? &error))
                       (not (next-tok-is-closing-bracket toks i)))
         (match (parse-toks toks i)
           (Success pair) (do (push-back! arr* (box @(Pair.a &pair)))
                              (set! i @(Pair.b &pair)))
           (Error err)    (set! error (Just err)))
         (unless (just? &error)
          (let [maybe-sep (Array.nth toks i)]
            (match maybe-sep
              (Just sep)
              (match sep
               (SheriffTok.Comma) (set! i (inc i))
               (SheriffTok.RightBracket) (set! done true)
               _ (set! error (Just @"Expected Comma or RightBracket but got a different token")))
              _ (set! error (Just @"Expected Comma or RightBracket but got end of tokens"))))))
        (match error
          (Nothing)  (Success (Pair.init (SheriffJsonNode.Arr arr) (inc i)))
          (Just err) (Error err)))))

  (defn- parse-num [num-str i]
    (with SheriffJsonNode
      (match (Double.from-string num-str)
        (Just num) (Success (Pair.init (Num num) (inc i)))
        (Nothing) (Error @"Number not a valid double"))))

  ; TODO Parse escaped value properly
  (defn- parse-string [s]
   (Pattern.substitute #"\\n" s "\n" -1))

  (defn- parse-toks [toks i]
    (with SheriffJsonNode
      (with SheriffJsonNodeBox
        (let [tok (unsafe-nth toks @&i)]
          (match-ref tok
            (SheriffTok.Null)        (Success (Pair.init (Null) (inc i)))
            (SheriffTok.Str s)       (Success (Pair.init (Str (parse-string s)) (inc i)))
            (SheriffTok.Bol b)       (Success (Pair.init (Bol @b) (inc i)))
            (SheriffTok.Num num-str) (parse-num num-str i)
            (SheriffTok.LeftCurly)   (parse-obj toks (inc i))
            (SheriffTok.LeftBracket) (parse-array toks (inc i))
            _                        (Error (str* "Unexpected token: " tok)))))))

  (sig parse (Fn [(Ref String)] (Result SheriffJsonNode String)))
  (defn parse [s]
    (match (SheriffLexer.lex s)
      (Error err) (Error err)
      (Success tokens)
      (map (parse-toks &tokens 0)
           &(fn [pair] @(Pair.a &pair))))))

