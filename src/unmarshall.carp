(load "parse.carp")
(load "get.carp")
(load "rename.carp")

(definterface from-json (Fn [(Ref String)] (Result a String)))

(defmodule SheriffJSON
  (defndynamic create-key-sym [m]
   (map
     (fn [pair] (cons (gensym-with (car pair)) pair))
     m))

  (defndynamic make-access-key [t sym]
    (list 'SheriffJSONGetAccess.Key (list 'copy (SheriffJSON.get-field-rename t key))))

  (defndynamic try-get-value-for-key [t ms parsed path]
    (fn [hole]
      (let [sym (car ms)
            key (cadr ms)
            typ (caddr ms)
            parsed-val (gensym-with 'parsed-val)
            error (gensym-with 'error)
            new-path (append path (array (SheriffJSON.make-access-key t key)))]
        (list 'let
              (array parsed-val (SheriffJSON.get-value typ parsed new-path))
              (list 'match parsed-val
                    (list 'Result.Error error) (list 'Result.Error error)
                    (list 'Result.Success sym) hole)))))

  (defndynamic try-get-values-for-struct [t ms parsed path]
   (reduce (fn [acc y] (fn [hole] (acc ((SheriffJSON.try-get-value-for-key t y parsed path) hole))))
           (fn [hole] hole)
           ms))

  (defndynamic build-struct [t parsed path]
    (let [obj-parsed (gensym-with 'obj-parsed)
          ms (SheriffJSON.create-key-sym (eval (list 'members t)))]
      (list 'Result.and-then
        (list 'SheriffJSON.get parsed path)
        (list 'ref (list 'fn (array obj-parsed)
                     ((SheriffJSON.try-get-values-for-struct t ms obj-parsed '[])
                      (list 'Result.Success
                       (cons (Symbol.prefix t 'init)
                             (map (fn [triple] (car triple))
                                  ms)))))))))

  (defndynamic type-is-array? [t]
    (and (list? t)
         (= (car t) 'Array)))

  (defndynamic unwrap-arr [t a]
    (let [a* (gensym-with 'a)
          new-arr (gensym-with 'new-arr)
          error   (gensym-with 'error)
          i (gensym-with 'i)
          err (gensym-with 'err)
          msuccess (gensym-with 'msuccess)
          merror (gensym-with 'merror)
          unbox `(SheriffJsonNodeBox.unbox (copy (Array.unsafe-nth %a* %i)))
          get-val (SheriffJSON.get-value t unbox '[])]
      `(let-do [%a* &%a
                %new-arr []
                %error (Maybe.Nothing)
                %i 0]
         (while-do (and (Maybe.nothing? &%error)
                        (< %i (Array.length %a*)))
          (match %get-val
           (Result.Success %msuccess) (Array.push-back! &%new-arr %msuccess)
           (Result.Error %merror) (set! %error (Just %merror)))
          (set! %i (inc %i)))
         (match %error
           (Just %err) (Result.Error %err)
           _ (Result.Success %new-arr)))))

  (defndynamic build-arr [t parsed path]
    (let [val (gensym-with 'val)
          arr (gensym-with 'arr)
          unwrap (SheriffJSON.unwrap-arr t arr)]
     `(Result.and-then (SheriffJSON.get %parsed %path)
       &(fn [%val]
         (match %val
           (SheriffJsonNode.Arr %arr) %unwrap
           _ (Error @"Not an array"))))))

  (defndynamic get-value [t parsed path]
    (let [ref-parsed  (list 'ref parsed)
          assert-path (list 'the '(Array SheriffJSONGetAccess) path)]
     (cond
      (SheriffJSON.type-is-array? t) (SheriffJSON.build-arr (cadr t) ref-parsed assert-path)

      (list? t)
      (macro-error (String.concat [(str t) " is not supported by unmarshall"]))

      (Introspect.struct? (eval t))
      (SheriffJSON.build-struct t ref-parsed assert-path)

      (case t
        'String (list 'SheriffJSON.get-string ref-parsed assert-path)
        'Bool (list 'SheriffJSON.get-bool ref-parsed assert-path)
        'Double (list 'SheriffJSON.get-number ref-parsed assert-path)
        'Int (list 'Result.map
               (list 'SheriffJSON.get-number ref-parsed assert-path)
               (list 'ref 'Double.to-int))
        (macro-error (String.concat [(str t) " is not supported by unmarshall"]))))))

  (defndynamic unmarshall-internal [t string]
    (let [top-parsed (gensym-with 'top-parsed)
          success (gensym-with 'success)
          error (gensym-with 'error)]
      (list 'the (list 'Result t 'String)
                 (list 'match (list 'SheriffJSON.parse string)
                   (list 'Result.Error error) (list 'Result.Error error)
                   (list 'Result.Success success)
                   (SheriffJSON.get-value t success '[])))))

  (defmacro unmarshall [t string]
    (let [ref-str (gensym-with 'reference)
          top-parsed (gensym-with 'top-parsed)
          success (gensym-with 'success)
          error (gensym-with 'error)]
      (list (list 'fn [ref-str] (SheriffJSON.unmarshall-internal t ref-str))
            string))))

(make-deriver 'from-json ['string]
  (fn [t]
    (SheriffJSON.unmarshall-internal t 'string)))

