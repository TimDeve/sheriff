(register-type SheriffJsonNodeBox "void*")
(defmodule SheriffJsonNodeBox
  (register = (Fn [(Ref SheriffJsonNodeBox) (Ref SheriffJsonNodeBox)] Bool))
  (implements = =)

  (register prn (Fn [(Ref SheriffJsonNodeBox)] String))
  (implements prn prn)

  (register zero (Fn [] SheriffJsonNodeBox))
  (implements zero zero)

  (deftemplate copy (Fn [(Ref SheriffJsonNodeBox)] SheriffJsonNodeBox)
                    "void* $NAME(void** pptr)"
                    "$DECL {
                       SheriffJsonNode* box = (SheriffJsonNode*)CARP_MALLOC(sizeof(SheriffJsonNode));
                       assert(box);
                       *box = SheriffJsonNode_copy((SheriffJsonNode*)*pptr);
                       return box;
                    }")
  (implements copy SheriffJsonNodeBox.copy)

  (deftemplate delete (Fn [SheriffJsonNodeBox] ())
                    "void $NAME(void* bx)"
                    "$DECL {
                       SheriffJsonNode_delete(*(SheriffJsonNode*)bx);
                       CARP_FREE(bx);
                     }")
  (implements delete SheriffJsonNodeBox.delete))

(deftype SheriffJsonNode
 (Num [Double])
 (Arr [(Array SheriffJsonNodeBox)])
 (Obj [(Map String SheriffJsonNodeBox)])
 (Str [String])
 (Bol [Bool])
 Null)

(defmodule SheriffJsonNode
  (defn type-name [n]
   (match-ref n
    (Arr _) @"array"
    (Bol _) @"boolean"
    (Num _) @"number"
    (Obj _) @"object"
    (Str _) @"string"
    Null    @"null"))

  (sig = (Fn [(Ref SheriffJsonNode) (Ref SheriffJsonNode)] Bool))
  (defn = [a b]
   (match-ref a
    (Arr aa) (match-ref b (Arr bb) (= aa bb) _ false)
    (Bol aa) (match-ref b (Bol bb) (= aa bb) _ false)
    (Num aa) (match-ref b (Num bb) (= aa bb) _ false)
    (Obj aa) (match-ref b (Obj bb) (= aa bb) _ false)
    (Str aa) (match-ref b (Str bb) (= aa bb) _ false)
    Null     (match-ref b Null     true      _ false)))
  (implements = =))

(defmodule SheriffJsonNodeBox
  (deftemplate box (Fn [SheriffJsonNode] SheriffJsonNodeBox)
                   "void* $NAME(SheriffJsonNode some)"
                   "$DECL {
                      SheriffJsonNode *box = (SheriffJsonNode*)CARP_MALLOC(sizeof(SheriffJsonNode));
                      assert(box);
                      *box = some;
                      return box;
                    }")

  (deftemplate unbox (Fn [SheriffJsonNodeBox] SheriffJsonNode)
                     "SheriffJsonNode $NAME(void* box)"
                     "$DECL {
                        SheriffJsonNode some = *((SheriffJsonNode*)box);
                        CARP_FREE(box);
                        return some;
                      }")

  (deftemplate peek (Fn [(Ref SheriffJsonNodeBox)] (Ref SheriffJsonNode))
                    "SheriffJsonNode* $NAME(void** boxptr)"
                    "$DECL {
                       return *boxptr;
                     }")

  (defn zero [] (box (SheriffJsonNode.Null)))
  (defn prn [a] (str (peek a)))
  (defn prn-owned [a] (SheriffJsonNodeBox.prn &a))
  (implements prn prn-owned)
  (defn = [a b] (= (peek a) (peek b))))

