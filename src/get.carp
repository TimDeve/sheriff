(load "./lex.carp")
(load "./json-node.carp")

(use Maybe)
(use Result)
(use Array)
(use Map)

(deftype SheriffJSONGetAccess
 (Key [String])
 (Idx [Int]))

(defmodule SheriffJSONGetAccess
  (sig id (Fn [(Array SheriffJSONGetAccess)] (Array SheriffJSONGetAccess)))
  (defn id [a] a)

  (sig from-str (Fn [(Ref String)] (Array SheriffJSONGetAccess)))
  (defn from-str [s]
    (copy-map &(fn [s] (Key @s)) &(String.split-by s &[\.])))

  (defn str [arr]
    (String.join ""
      &(copy-map &(fn [t] (match-ref t (Key s) (str* "." s)
                                       (Idx i) (str* "[" i "]")))
                 (the (Ref (Array SheriffJSONGetAccess)) arr))))
  (implements str str))

(definterface into-sheriff-json-get-access (Fn [a] (Array SheriffJSONGetAccess)))
(implements into-sheriff-json-get-access SheriffJSONGetAccess.id)
(implements into-sheriff-json-get-access SheriffJSONGetAccess.from-str)

(defmodule SheriffJSON
  (defn- get-obj-value [json key]
   (match-ref json
     (Obj m) (Success (SheriffJsonNodeBox.unbox (Map.get m key)))
     Null    (Success (SheriffJsonNode.Null))
     _       (Error (fmt "Cannot access key '%d' from type '%s'" key &(SheriffJsonNode.type-name json)))))

  (defn- get-arr-value [json idx]
   (match-ref json
     (Arr a) (Success (SheriffJsonNodeBox.unbox (or-zero (nth a idx))))
     Null    (Success (SheriffJsonNode.Null))
     _       (Error (fmt "Cannot access index '%d' from type '%s'" idx &(SheriffJsonNode.type-name json)))))

  (sig get (Fn [(Ref SheriffJsonNode) a] (Result SheriffJsonNode String)))
  (defn get [json p]
    (let [current-value (Success @json)
          path (into-sheriff-json-get-access p)]
     (do
       (foreach [key &path]
        (set! current-value
              (match current-value
                (Success j) (match-ref key
                              (Key s) (if (= s "") (Success j)
                                                   (get-obj-value &j s))
                              (Idx i) (get-arr-value &j @i))
                (Error err) (Error err))))
       current-value)))

  (defn get-string [json s]
    (and-then (get json s)
              &(fn [v]
                (match v
                  (SheriffJsonNode.Str st) (Success st)
                  _ (Error @"Value is not a string")))))

  (defn get-number [json s]
    (and-then (get json s)
              &(fn [v]
                (match v
                  (SheriffJsonNode.Num num) (Success num)
                  _ (Error @"Value is not a number")))))

  (defn get-bool [json s]
    (and-then (get json s)
              &(fn [v]
                (match v
                  (SheriffJsonNode.Bol b) (Success b)
                  _ (Error @"Value is not a boolean"))))))
